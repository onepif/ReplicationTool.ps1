<File version="3.2">
  <FileID>700cbee4-a126-4c55-afaf-eea2fdadd04f</FileID>
  <Preview>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
nOkoAMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAAgDso
AMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAAgDsoAMRX
oQAAgDsoAMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAA
gDsoAMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAAgDso
AMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAAgDsoAMRX
oQAAgDsoAMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAA
gDsoAMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAAgDso
AMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAAgDsoAMRX
oQAAgDsoAMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAA
gDsoAMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAAgDso
AMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAAgDsoAMRX
oQAAgDsoAMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAA
gDsoAMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAAgDso
AMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAAgDsoAMRX
oQAAgDsoAMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAA
gDsoAMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAAgDso
AMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAAgDsoAMRX
oQAAgDsoAMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAA
gDsoAMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAAgDso
AMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAAgDsoAMRX
oQAAgDsoAMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAA
gDsoAMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAAgDso
AMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAAgDsoAMRX
oQAAgDsoAMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAA
gDsoAMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAAgDso
AMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAAgDsoAMRX
oQAAgDsoAMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAA
gDsoAMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAAgDso
AMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAAgDsoAMRX
oQAAgDsoAMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAA
gDsoAMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAAgDso
AMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAAgDsoAMRXoQAAgDsoAMRX
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
GZp260uK73pf7x0Z0uDQiI4drdPGh67QnNt/rb875yL9w7+N7pN/u/NpJeQWq2D9NP3l3/yDvn7+
t3TehZfq589sUFNpkpY9NfougLpe+26KFsUsn2QKwPVaHtOovu7WANvwxzv9CoAtpe3q6qpQ4rqH
9Ot/PE8XXXihLrr4Qn3757/Vou3pau82+/d4gdbcPFdPP7xdxcM96uzuVeveufrxxf+q37+8X2VN
o++WCDT+V0UBIL4MBeDM4G4BaFJNba3qGppVkbFXYaE7tGPHDoVFRCmn0k42taouy1f6vr2KiIjQ
3n37lZBRYK5Trfz8fOWU1ajZTCK1ZZkqLClRdXO3OmvzlRBjl9+jqOxDarZPJ9gJtyJdUXsiFLEn
Wgdzq9XV3qDy4jylFVSqseWr/QzBKwDNam2rV3FGltIT81RRV6ea6mrn7xJU19aoLCdB2Rtm6l9/
dpdmLd+qqP1Ris6rV09LjTLXTtff/uJhrdy5W5H7Y5VU1qKe1jqVFeUpvbBKTc1t6hgo1Kb7Z2rW
7W8orb9XnS4/v306FgB7m66tN/uxslCJu0Kd26O1KzpReVXm++a2V1NXoZLMPJWY/VRvXydgHzlo
rFLqwf1Kyi1TnSlmo68dcB8FgPgyFIAzg1sFYPxgftllv9Q555yjc8+/UBdedJEuMi688Ns675vn
6OtfP0c33zpJgyMj6u3tVU9Pj7rHXifQ3tGhDvuiQbsNbZ3OJO+8/7rVnMF19zjL9nTYj2UdfWV2
i1nGuaynW10dtlzYybPDFIGvflYbvALQZMYe1NI33tD5F5ynb5zzdX3d7Eu7P88x+87u0wu+/g/6
qx/O1vYCs+zwgHo7zc/cWKm09bP0jdtXKbet20yyPeqyn6Ng9klbu/m+/Yjk6hQtnfET/cOlt+mt
6Dr19bp79m+dbgXATqgZGelm/31D3/jmefrW2O3RuU1++1tjt0mzj7/+Db36+lIdOTr88QsiTWGy
t7tO51Ml+RwAQj4RCsCZwe1HAOxfx0tKSvpM2dnZnpz5fRXBLAD2L8SVlJQE3HeOlDRl5peppsH+
rkavYyeo+upy5ZWYM9hAr+g3v9PWxhqV5GYoNbdI1eaM1s3n/sedbgXA3pbtXx0MuB9PYfe53feB
xplIFADiy1AAzgxuFwD7J17tn4X9LPb7ga53OglmAbC/AzsRBdp3H+locz4R8eTrNdu/h/AH/gaC
fTSg1T4a0NGu1gl6OPt0KwCWvT0H3IensNtu932gMSYSBYD4MhSAM8PJBcAejOzkYw/MZzM7GdgJ
6osUgLS0NKfUBBrnbGP3Q0pKyhcqADU1Nc5+DjTO2cTe32zxoAAQX4UCcGYYLwB79+5VRUWFc+Z7
tquqqnJelGhLkd1Hn1UAcnJyFB8f77xIL9A4Zxu7H2JjY51994cKQFRUlAoLC539HGics01ZWZki
IyMpAMQ/oQCcGewBxz4Eag/c9szMnvXigDP527NZO2kFKgB2gisvL9e+ffsCXv9sZfeHndTs39w/
dZ/Z/TgwMOA85273b6Drn43s2X9cXJzzolYKAPFFKAAA/hiBChX+eBQA4nkoAGeW8TNdfFKgfXWy
QNc52wXaTycLdB388aWIAkA8DwUAAIKPAkA8DwUAAIKPAkA8DwUAAIKPAkA8DwUAAIKPAkA8DwUA
AIKPAkA8DwUAAIKPAkA8DwUAAIKPAkA8DwUAAIKPAkA8DwUAAIKPAkA8zx8qAPbGODI0esMEAEwc
e6xtogAQL/NZBaDC3vDaRksAAGDi2WOuPfaefCymAJAJy2cVAMveEG0bBQBMvFMnf4sCQCYsf6gA
AACCiwJAJiwUAAA4fVEAyISFAgAApy8KAJmw2AJgb1z1Pe86NzQAwOmjrvu42ruHKADE/dx0882D
Dc1d6ugZdlomAOD0YSf/5rYeTZp827GxwzYh7uS3v/1t/e1TpgxOMWzDBACcXqZMuWPw6quvbh07
bBNCCCGEEEIIIYQQQgghhBBCCCGEnAX5kz/5/wH7/Z4j1LS8VAAAAABJRU5ErkJggg==</Preview>
  <Form>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
+6fY/Z/Jzd90yurVvxkAAA==</Form>
  <Code><![CDATA[
$MainForm_Load={
#TODO: Initialize Form Controls here

}

$buttonCallChildForm_Click={
	#TODO: Place custom script here
	if((Show-ChildForm_psf) -eq 'OK')
	{
		
	}
}

$buttonOK_Click={
	#TODO: Place custom script here
	
}

$buttonCancelProcess_Click={
	$script:CancelLoop = $true
}

$buttonStartProcess_Click={
	#Init CancelLoop
	$script:CancelLoop = $false
	$buttonCancelProcess.Enabled = $true
	#Disable the button so we don't trigger it again
	$this.Enabled = $false
	#Reset the Progress Bar
	$progressbar1.Value = 0
	
	for($i = 0; $i -lt $progressbar1.Maximum; $i++)
	{
		#----------------------------------------
		#Place custom script here
		sleep -Milliseconds 200
		
		#----------------------------------------
		#process the pending message
		[System.Windows.Forms.Application]::DoEvents()
		
		if($script:CancelLoop -eq $true)
		{
			#Clear the progress bar
			$progressbar1.Value = 0
			#Exit the loop
			break;
		}
		#Step the progress bar
		$progressbar1.PerformStep() 
	}
	
	#Enable the button so we can click it again
	$this.Enabled = $true
	$buttonCancelProcess.Enabled = $false
}

#region Control Helper Functions
function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]
		$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]
		$DisplayMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$listBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
	{
		$listBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$listBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$listBox.Items.Add($obj)
		}
		$listBox.EndUpdate()
	}
	else
	{
		$listBox.Items.Add($Items)
	}
	
	$listBox.DisplayMember = $DisplayMember
}



function Update-ListViewColumnSort
{
<#
	.SYNOPSIS
		Sort the ListView's item using the specified column.
	
	.DESCRIPTION
		Sort the ListView's item using the specified column.
		This function uses Add-Type to define a class that sort the items.
		The ListView's Tag property is used to keep track of the sorting.
	
	.PARAMETER ListView
		The ListView control to sort.
	
	.PARAMETER ColumnIndex
		The index of the column to use for sorting.
	
	.PARAMETER SortOrder
		The direction to sort the items. If not specified or set to None, it will toggle.
	
	.EXAMPLE
		Update-ListViewColumnSort -ListView $listview1 -ColumnIndex 0
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListView]
		$ListView,
		[Parameter(Mandatory = $true)]
		[int]
		$ColumnIndex,
		[System.Windows.Forms.SortOrder]
		$SortOrder = 'None'
	)
	
	if (($ListView.Items.Count -eq 0) -or ($ColumnIndex -lt 0) -or ($ColumnIndex -ge $ListView.Columns.Count))
	{
		return;
	}
	
	#region Define ListViewItemComparer
	try
	{
		[ListViewItemComparer] | Out-Null
	}
	catch
	{
		Add-Type -ReferencedAssemblies ('System.Windows.Forms') -TypeDefinition  @" 
	using System;
	using System.Windows.Forms;
	using System.Collections;
	public class ListViewItemComparer : IComparer
	{
	    public int column;
	    public SortOrder sortOrder;
	    public ListViewItemComparer()
	    {
	        column = 0;
			sortOrder = SortOrder.Ascending;
	    }
	    public ListViewItemComparer(int column, SortOrder sort)
	    {
	        this.column = column;
			sortOrder = sort;
	    }
	    public int Compare(object x, object y)
	    {
			if(column >= ((ListViewItem)x).SubItems.Count)
				return  sortOrder == SortOrder.Ascending ? -1 : 1;
		
			if(column >= ((ListViewItem)y).SubItems.Count)
				return sortOrder == SortOrder.Ascending ? 1 : -1;
		
			if(sortOrder == SortOrder.Ascending)
	        	return String.Compare(((ListViewItem)x).SubItems[column].Text, ((ListViewItem)y).SubItems[column].Text);
			else
				return String.Compare(((ListViewItem)y).SubItems[column].Text, ((ListViewItem)x).SubItems[column].Text);
	    }
	}
"@ | Out-Null
	}
	#endregion
	
	if ($ListView.Tag -is [ListViewItemComparer])
	{
		#Toggle the Sort Order
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			if ($ListView.Tag.column -eq $ColumnIndex -and $ListView.Tag.sortOrder -eq 'Ascending')
			{
				$ListView.Tag.sortOrder = 'Descending'
			}
			else
			{
				$ListView.Tag.sortOrder = 'Ascending'
			}
		}
		else
		{
			$ListView.Tag.sortOrder = $SortOrder
		}
		
		$ListView.Tag.column = $ColumnIndex
		$ListView.Sort() #Sort the items
	}
	else
	{
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			$SortOrder = [System.Windows.Forms.SortOrder]::Ascending
		}
		
		#Set to Tag because for some reason in PowerShell ListViewItemSorter prop returns null
		$ListView.Tag = New-Object ListViewItemComparer ($ColumnIndex, $SortOrder)
		$ListView.ListViewItemSorter = $ListView.Tag #Automatically sorts
	}
}



function Add-ListViewItem
{
<#
	.SYNOPSIS
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.DESCRIPTION
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.PARAMETER ListView
		The ListView control to add the items to.

	.PARAMETER Items
		The object or objects you wish to load into the ListView's Items collection.
		
	.PARAMETER  ImageIndex
		The index of a predefined image in the ListView's ImageList.
	
	.PARAMETER  SubItems
		List of strings to add as Subitems.
	
	.PARAMETER Group
		The group to place the item(s) in.
	
	.PARAMETER Clear
		This switch clears the ListView's Items before adding the new item(s).
	
	.EXAMPLE
		Add-ListViewItem -ListView $listview1 -Items "Test" -Group $listview1.Groups[0] -ImageIndex 0 -SubItems "Installed"
#>
	
	Param( 
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	[System.Windows.Forms.ListView]$ListView,
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	$Items,
	[int]$ImageIndex = -1,
	[string[]]$SubItems,
	$Group,
	[switch]$Clear)
	
	if($Clear)
	{
		$ListView.Items.Clear();
    }
    
    $lvGroup = $null
    if ($Group -is [System.Windows.Forms.ListViewGroup])
    {
        $lvGroup = $Group
    }
    elseif ($Group -is [string])
    {
        #$lvGroup = $ListView.Group[$Group] # Case sensitive
        foreach ($groupItem in $ListView.Groups)
        {
            if ($groupItem.Name -eq $Group)
            {
                $lvGroup = $groupItem
                break
            }
        }
        
        if ($null -eq $lvGroup)
        {
            $lvGroup = $ListView.Groups.Add($Group, $Group)
        }
    }
    
	if($Items -is [Array])
	{
		$ListView.BeginUpdate()
		foreach ($item in $Items)
		{		
			$listitem  = $ListView.Items.Add($item.ToString(), $ImageIndex)
			#Store the object in the Tag
			$listitem.Tag = $item
			
			if($null -ne $SubItems)
			{
				$listitem.SubItems.AddRange($SubItems)
			}
			
			if($null -ne $lvGroup)
			{
				$listitem.Group = $lvGroup
			}
		}
		$ListView.EndUpdate()
	}
	else
	{
		#Add a new item to the ListView
		$listitem  = $ListView.Items.Add($Items.ToString(), $ImageIndex)
		#Store the object in the Tag
		$listitem.Tag = $Items
		
		if($null -ne $SubItems)
		{
			$listitem.SubItems.AddRange($SubItems)
		}
		
		if($null -ne $lvGroup)
		{
			$listitem.Group = $lvGroup
		}
	}
}



function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]
		$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	$ComboBox.DisplayMember = $DisplayMember
	$ComboBox.ValueMember = $ValueMember
}


#endregion

$buttonBrowse_Click={

	if($openfiledialog1.ShowDialog() -eq 'OK')
	{
		$textboxFile.Text = $openfiledialog1.FileName
	}
}

$buttonLoadProcess_Click={
	#TODO: Place custom script here
	$textbox1.Text = Get-Process | Out-String
}

$listviewApplications_ColumnClick=[System.Windows.Forms.ColumnClickEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.ColumnClickEventArgs]
	Update-ListViewColumnSort $this $_.Column
}

function Add-ToApplicationList
{
	<#
	.SYNOPSIS
		Adds a application to the ListView.

	.DESCRIPTION
		Adds a application to the ListView

	.PARAMETER  ApplicationPath
		The application's file path.

	.PARAMETER  ImageIndex
		The index of a predefined image in the ListView's ImageList. If not defined, it will try to extract the image from the application.

	.EXAMPLE
		Add-ToApplicationList 'C:\application.exe'

	.LINK
		about_comment_based_help

#>
	Param( 
  [ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	[System.Windows.Forms.ListView]$ListView,
  [ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	[string]$ApplicationPath,
	[int]$ImageIndex = -1)
	
	if(![string]::IsNullOrEmpty($ApplicationPath))
	{
		$AppExist = [System.IO.File]::Exists($ApplicationPath)
		
		if($AppExist)
		{
			if($null -eq $ImageIndex -or $ImageIndex -eq -1)
			{
				$icon = [System.Drawing.Icon]::ExtractAssociatedIcon($ApplicationPath)
				
				if($null -ne $icon)
				{
					$listview.LargeImageList.Images.Add($icon)
					$listview.SmallImageList.Images.Add($icon)
					$ImageIndex = $listview.LargeImageList.Images.Count - 1
				}
			}
		}
		elseif ($ImageIndex -eq -1)
		{
			$ImageIndex = 0	#Default the image
		}
		
		#Add a new item to the ListView
		$item  = $ListView.Items.Add([System.IO.Path]::GetFileName($ApplicationPath), $ImageIndex)
		$item.Tag = $ApplicationPath #Save the Path
		$item.ToolTipText = $ApplicationPath
		
		if($AppExist)
		{ 	
			#Set the status and the group
			[void]$item.SubItems.Add('Installed')
			$item.Group = $ListView.Groups[0]
		}
		else
		{
			[void]$item.SubItems.Add('Not Installed')
			$item.Group = $ListView.Groups[1]
		}
	}
}
]]></Code>
  <Mode>0</Mode>
  <Assemblies />
</File>